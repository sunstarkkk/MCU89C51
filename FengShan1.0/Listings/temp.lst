C51 COMPILER V9.54   TEMP                                                                  06/17/2025 14:54:16 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE TEMP
OBJECT MODULE PLACED IN .\Objects\temp.obj
COMPILER INVOKED BY: D:\Software\MDK\C51\BIN\C51.EXE temp.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\temp.lst) OBJECT(.\Objects\temp.obj)

line level    source

   1          #include "temp.h"
   2          #include "delay.h"
   3          
   4          #define uchar unsigned char
   5          #define uint unsigned int
   6                  
   7          
   8          // 全局变量
   9          uchar currentLevel = 0;        // 当前档位
  10          float currentTemp = 0.0;       // 当前温度值
  11          uchar newLevel;
  12          
  13          
  14          /* DAC控制引脚 */
  15          #define DAC_DATA P0
  16          sbit DAC_WR = P3^6;
  17          /* DS18B20引脚 */
  18          sbit DS18B20_DQ = P2^7;  // 假设DS18B20数据线连接到P2.7
  19          
  20          
  21          /* 档位对应输出电压值 */
  22          uchar code VOLTAGE_LEVEL[7] = {
  23              0x00,   // 0档：0V
  24              0x24,   // 1档
  25              0x48,   // 2档
  26              0x6C,   // 3档
  27              0x90,   // 4档
  28              0xB4,   // 5档
  29              0xD8,   // 6档
  30          };
  31          
  32          
  33          /******************** DS18B20驱动程序 ********************/
  34          // DS18B20初始化
  35          void DS18B20_Init() {
  36   1          DS18B20_DQ = 0x01;   // 拉高总线
  37   1          DelayUS(8);       // 延时
  38   1          DS18B20_DQ = 0x00;   // 拉低总线(复位脉冲)
  39   1          DelayUS(80);      // 480-960μs复位脉冲
  40   1          DS18B20_DQ = 0x01;   // 释放总线(上升沿)
  41   1          DelayUS(14);      // 等待15-60μs
  42   1          // 等待DS18B20回应(低电平60-240μs)
  43   1          while(DS18B20_DQ);
  44   1          while(!DS18B20_DQ);
  45   1          DelayUS(20);
  46   1      }
  47          
  48          // 向DS18B20写入一个字节
  49          void DS18B20_WriteByte(uchar dat) {
  50   1          uchar i;
  51   1          for(i = 0; i < 8; i++) {
  52   2              DS18B20_DQ = 0x00;   // 拉低总线(启动写时隙)
  53   2              DS18B20_DQ = dat & 0x01; // 写入数据位
  54   2              DelayUS(10);      // 保持时间>1μs
C51 COMPILER V9.54   TEMP                                                                  06/17/2025 14:54:16 PAGE 2   

  55   2              DS18B20_DQ = 0x01;   // 释放总线
  56   2              dat >>= 1;        // 准备下一位
  57   2              DelayUS(5);       // 恢复时间>1μs
  58   2          }
  59   1      }
  60          
  61          // 从DS18B20读取一个字节
  62          uchar DS18B20_ReadByte() {
  63   1          uchar i, dat = 0;
  64   1          for(i = 0; i < 8; i++) {
  65   2              DS18B20_DQ = 0x00;   // 拉低总线(启动读时隙)
  66   2              dat >>= 1;         // 准备接收位
  67   2              DS18B20_DQ = 0x01;   // 释放总线
  68   2              if(DS18B20_DQ)    // 读取数据位
  69   2                  dat |= 0x80;
  70   2              DelayUS(8);       // 等待采样
  71   2          }
  72   1          return dat;
  73   1      }
  74          
  75          // 设置DAC输出电压
  76          void SetDACVoltage(uchar level) {
  77   1          // 确保档位在有效范围内
  78   1          if(level > 5) level = 5;
  79   1          
  80   1          DAC_DATA = VOLTAGE_LEVEL[level];
  81   1          currentLevel = level; // 更新当前档位
  82   1      }
  83          
  84          // 读取温度并计算结果
  85          void DS18B20_ReadTemp() {
  86   1          uchar TL, TH;
  87   1          int temp;
  88   1          
  89   1          DS18B20_Init();             // 初始化
  90   1          DS18B20_WriteByte(0xCC);    // 跳过ROM匹配
  91   1          DS18B20_WriteByte(0x44);    // 启动温度转换
  92   1          DelayMS(150);              // 等待转换完成 
  93   1              
  94   1          DS18B20_Init();             // 重新初始化
  95   1          DS18B20_WriteByte(0xCC);    // 跳过ROM匹配
  96   1          DS18B20_WriteByte(0xBE);    // 读取温度寄存器
  97   1          
  98   1          TL = DS18B20_ReadByte();    // 读取温度低字节
  99   1          TH = DS18B20_ReadByte();    // 读取温度高字节
 100   1          
 101   1          // 组合温度值
 102   1          temp = (TH << 8) | TL;
 103   1          // 转换为实际温度值(除以16)
 104   1          currentTemp = temp * 0.0625;
 105   1      }
 106          
 107          // 获取当前温度
 108          float GetTemperature() {
 109   1          DS18B20_ReadTemp();
 110   1          return currentTemp;
 111   1      }
 112          
 113          /******************** 自动控制函数 ********************/
 114          // 温度自动控制策略
 115          void TempAutoControl() {
 116   1          float temp = GetTemperature();
C51 COMPILER V9.54   TEMP                                                                  06/17/2025 14:54:16 PAGE 3   

 117   1          if(temp <= 27.0) {
 118   2                      SetDACVoltage(0);
 119   2          } else {
 120   2              // 温度>=28℃，开启自动控制
 121   2              // 计算档位：每升高1℃升一档
 122   2              newLevel = (uchar)(temp - 27.0);
 123   2              
 124   2              // 确保档位在有效范围内
 125   2              if(newLevel > 5) newLevel = 5;
 126   2              SetDACVoltage(newLevel);
 127   2          }
 128   1      }
*** WARNING C316 IN LINE 128 OF temp.c: unterminated conditionals


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    302    ----
   CONSTANT SIZE    =      7    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
